from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import List, Optional
from app.core.dependencies import get_current_user, get_db
from app.models.user import User
from app.models.chat_history import ChatHistory
from app.ml.rag.rag_chat import get_bloodaid_rag

router = APIRouter(prefix="/ai", tags=["AI Assistant"])

class ChatRequest(BaseModel):
    message: str
    language: str = "en"
    context: str = "general"  # health, donation, emergency
    userId: str

class ChatResponse(BaseModel):
    response: str
    language: str
    suggestions: Optional[List[str]] = None

# Enhanced mock responses for different languages and contexts
MOCK_RESPONSES = {
    "emergency": {
        "en": {
            "response": "üö® Emergency Blood Request Detected!\n\nI'm here to help you quickly find blood donors. Let me assist with:\n\n1. üìç Finding nearby donors\n2. üè• Contacting blood banks\n3. üìû Emergency helpline numbers\n4. üö® Sending SOS alerts\n\nWhat's your current location and required blood group?",
            "suggestions": ["Find donors near me", "Emergency blood banks", "Send SOS alert", "Hospital contacts"]
        },
        "hi": {
            "response": "üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∞‡§ï‡•ç‡§§ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß!\n\n‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∞‡§ï‡•ç‡§§‡§¶‡§æ‡§§‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:\n\n1. üìç ‡§™‡§æ‡§∏ ‡§ï‡•á ‡§∞‡§ï‡•ç‡§§‡§¶‡§æ‡§§‡§æ ‡§ñ‡•ã‡§ú‡•á‡§Ç\n2. üè• ‡§∞‡§ï‡•ç‡§§ ‡§¨‡•à‡§Ç‡§ï‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç\n3. üìû ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®\n4. üö® SOS ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç\n\n‡§Ü‡§™‡§ï‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§æ‡§® ‡§î‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∞‡§ï‡•ç‡§§ ‡§∏‡§Æ‡•Ç‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
            "suggestions": ["‡§™‡§æ‡§∏ ‡§ï‡•á ‡§¶‡§æ‡§§‡§æ ‡§ñ‡•ã‡§ú‡•á‡§Ç", "‡§∞‡§ï‡•ç‡§§ ‡§¨‡•à‡§Ç‡§ï", "SOS ‡§≠‡•á‡§ú‡•á‡§Ç", "‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï"]
        }
    },
    "health": {
        "en": {
            "response": "ü©∫ Health & Wellness Support\n\nI can help you with:\n\n‚Ä¢ Blood donation eligibility checks\n‚Ä¢ Hemoglobin level guidance\n‚Ä¢ Pre-donation health tips\n‚Ä¢ Post-donation care\n‚Ä¢ Health vitals tracking\n‚Ä¢ Chronic condition support\n\nWhat health topic would you like to discuss?",
            "suggestions": ["Check eligibility", "Hemoglobin tips", "Health tracking", "Chronic conditions"]
        },
        "hi": {
            "response": "ü©∫ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§î‡§∞ ‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ\n\n‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:\n\n‚Ä¢ ‡§∞‡§ï‡•ç‡§§‡§¶‡§æ‡§® ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö\n‚Ä¢ ‡§π‡•Ä‡§Æ‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§® ‡§∏‡•ç‡§§‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®\n‚Ä¢ ‡§¶‡§æ‡§®-‡§™‡•Ç‡§∞‡•ç‡§µ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ\n‚Ä¢ ‡§¶‡§æ‡§®-‡§¨‡§æ‡§¶ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤\n‚Ä¢ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä\n‚Ä¢ ‡§™‡•Å‡§∞‡§æ‡§®‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ\n\n‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§ö‡§∞‡•ç‡§ö‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
            "suggestions": ["‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç", "‡§π‡•Ä‡§Æ‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§® ‡§∏‡•Å‡§ù‡§æ‡§µ", "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó", "‡§™‡•Å‡§∞‡§æ‡§®‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç"]
        }
    },
    "donation": {
        "en": {
            "response": "ü©∏ Blood Donation Support\n\nReady to make a difference? I can help with:\n\n‚Ä¢ Finding donation centers near you\n‚Ä¢ Scheduling appointments\n‚Ä¢ Understanding the donation process\n‚Ä¢ Tracking your donation history\n‚Ä¢ Recognition and rewards\n‚Ä¢ Connecting with recipients\n\nHow would you like to contribute today?",
            "suggestions": ["Find centers", "Schedule donation", "Track history", "Learn process"]
        },
        "hi": {
            "response": "ü©∏ ‡§∞‡§ï‡•ç‡§§‡§¶‡§æ‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ\n\n‡§¨‡§¶‡§≤‡§æ‡§µ ‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç? ‡§Æ‡•à‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:\n\n‚Ä¢ ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§¶‡§æ‡§® ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§ñ‡•ã‡§ú‡§®‡§æ\n‚Ä¢ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡§®‡§æ\n‚Ä¢ ‡§¶‡§æ‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡§Æ‡§ù‡§®‡§æ\n‚Ä¢ ‡§¶‡§æ‡§® ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡§®‡§æ\n‚Ä¢ ‡§™‡§π‡§ö‡§æ‡§® ‡§î‡§∞ ‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞\n‚Ä¢ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§‡§ï‡§∞‡•ç‡§§‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§®‡§æ\n\n‡§Ü‡§ú ‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
            "suggestions": ["‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç", "‡§¶‡§æ‡§® ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡•á‡§Ç", "‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç", "‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡•Ä‡§ñ‡•á‡§Ç"]
        }
    },
    "general": {
        "en": {
            "response": "Hello! I'm BloodAid AI, your intelligent blood donation assistant. ü©∏\n\nI'm here to help with:\n‚Ä¢ Blood donation guidance\n‚Ä¢ Emergency blood requests\n‚Ä¢ Health and eligibility support\n‚Ä¢ Connecting donors with patients\n‚Ä¢ Medical information and tips\n\nHow can I assist you today?",
            "suggestions": ["Emergency help", "Donate blood", "Health check", "Find donors"]
        },
        "hi": {
            "response": "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç BloodAid AI ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§∞‡§ï‡•ç‡§§‡§¶‡§æ‡§® ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ ü©∏\n\n‡§Æ‡•à‡§Ç ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:\n‚Ä¢ ‡§∞‡§ï‡•ç‡§§‡§¶‡§æ‡§® ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®\n‚Ä¢ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∞‡§ï‡•ç‡§§ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß\n‚Ä¢ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§î‡§∞ ‡§™‡§æ‡§§‡•ç‡§∞‡§§‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ\n‚Ä¢ ‡§¶‡§æ‡§§‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§Æ‡§∞‡•Ä‡§ú‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•ã‡§°‡§º‡§®‡§æ\n‚Ä¢ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ\n\n‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
            "suggestions": ["‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ", "‡§∞‡§ï‡•ç‡§§‡§¶‡§æ‡§®", "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö", "‡§¶‡§æ‡§§‡§æ ‡§ñ‡•ã‡§ú‡•á‡§Ç"]
        },
        "kn": {
            "response": "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! ‡≤®‡≤æ‡≤®‡≥Å BloodAid AI, ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤¨‡≥Å‡≤¶‡≥ç‡≤ß‡≤ø‡≤µ‡≤Ç‡≤§ ‡≤∞‡≤ï‡≥ç‡≤§‡≤¶‡≤æ‡≤® ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï‡•§ ü©∏\n\n‡≤®‡≤æ‡≤®‡≥Å ‡≤á‡≤¶‡≤∞‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å:\n‚Ä¢ ‡≤∞‡≤ï‡≥ç‡≤§‡≤¶‡≤æ‡≤® ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤∞‡≥ç‡≤∂‡≤®\n‚Ä¢ ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∞‡≤ï‡≥ç‡≤§‡≤¶ ‡≤Ö‡≤µ‡≤∂‡≥ç‡≤Ø‡≤ï‡≤§‡≥Ü\n‚Ä¢ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤π‡≤§‡≥Ü ‡≤¨‡≥Ü‡≤Ç‡≤¨‡≤≤\n‚Ä¢ ‡≤¶‡≤æ‡≤®‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∞‡≥ã‡≤ó‡≤ø‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å\n‚Ä¢ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å\n\n‡≤á‡≤Ç‡≤¶‡≥Å ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?",
            "suggestions": ["‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≤π‡≤æ‡≤Ø", "‡≤∞‡≤ï‡≥ç‡≤§‡≤¶‡≤æ‡≤®", "‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≥Ü", "‡≤¶‡≤æ‡≤®‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤ø"]
        },
        "te": {
            "response": "‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞®‡±á‡∞®‡±Å BloodAid AI, ‡∞Æ‡±Ä ‡∞§‡±Ü‡∞≤‡∞ø‡∞µ‡±à‡∞® ‡∞∞‡∞ï‡±ç‡∞§‡∞¶‡∞æ‡∞® ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡∞ø‡∞®‡∞ø‡•§ ü©∏\n\n‡∞®‡±á‡∞®‡±Å ‡∞á‡∞Ç‡∞¶‡±Å‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å:\n‚Ä¢ ‡∞∞‡∞ï‡±ç‡∞§‡∞¶‡∞æ‡∞® ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞ï‡∞§‡±ç‡∞µ‡∞Ç\n‚Ä¢ ‡∞Ö‡∞§‡±ç‡∞Ø‡∞µ‡∞∏‡∞∞ ‡∞∞‡∞ï‡±ç‡∞§ ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞æ‡∞≤‡±Å\n‚Ä¢ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞∞‡±ç‡∞π‡∞§ ‡∞Æ‡∞¶‡±ç‡∞¶‡∞§‡±Å\n‚Ä¢ ‡∞¶‡∞æ‡∞§‡∞≤‡∞®‡±Å ‡∞∞‡±ã‡∞ó‡±Å‡∞≤‡∞§‡±ã ‡∞ï‡∞≤‡∞™‡∞°‡∞Ç\n‚Ä¢ ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ö‡∞ø‡∞ü‡±ç‡∞ï‡∞æ‡∞≤‡±Å\n\n‡∞à‡∞∞‡±ã‡∞ú‡±Å ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?",
            "suggestions": ["‡∞Ö‡∞§‡±ç‡∞Ø‡∞µ‡∞∏‡∞∞ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç", "‡∞∞‡∞ï‡±ç‡∞§‡∞¶‡∞æ‡∞®‡∞Ç", "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä", "‡∞¶‡∞æ‡∞§‡∞≤‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞Ç‡∞°‡∞ø"]
        },
        "ml": {
            "response": "‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥û‡¥æ‡µª BloodAid AI ‡¥Ü‡¥£‡µç, ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥¨‡µÅ‡¥¶‡µç‡¥ß‡¥ø‡¥Æ‡¥æ‡¥®‡¥æ‡¥Ø ‡¥∞‡¥ï‡µç‡¥§‡¥¶‡¥æ‡¥® ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡•§ ü©∏\n\n‡¥û‡¥æ‡µª ‡¥á‡¥§‡¥ø‡µΩ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç:\n‚Ä¢ ‡¥∞‡¥ï‡µç‡¥§‡¥¶‡¥æ‡¥® ‡¥Æ‡¥æ‡µº‡¥ó‡µç‡¥ó‡¥®‡¥ø‡µº‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥Ç\n‚Ä¢ ‡¥Ö‡¥ü‡¥ø‡¥Ø‡¥®‡µç‡¥§‡¥ø‡¥∞ ‡¥∞‡¥ï‡µç‡¥§ ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ\n‚Ä¢ ‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø‡¥µ‡µÅ‡¥Ç ‡¥Ø‡µã‡¥ó‡µç‡¥Ø‡¥§‡¥æ ‡¥™‡¥ø‡¥®‡µç‡¥§‡µÅ‡¥£‡¥Ø‡µÅ‡¥Ç\n‚Ä¢ ‡¥¶‡¥æ‡¥§‡¥æ‡¥ï‡µç‡¥ï‡¥≥‡µÜ ‡¥∞‡µã‡¥ó‡¥ø‡¥ï‡¥≥‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µΩ\n‚Ä¢ ‡¥Æ‡µÜ‡¥°‡¥ø‡¥ï‡µç‡¥ï‡µΩ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥®‡µÅ‡¥±‡µÅ‡¥ô‡µç‡¥ô‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç\n\n‡¥á‡¥®‡µç‡¥®‡µç ‡¥û‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç?",
            "suggestions": ["‡¥Ö‡¥ü‡¥ø‡¥Ø‡¥®‡µç‡¥§‡¥ø‡¥∞ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥Ç", "‡¥∞‡¥ï‡µç‡¥§‡¥¶‡¥æ‡¥®‡¥Ç", "‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥®", "‡¥¶‡¥æ‡¥§‡¥æ‡¥ï‡µç‡¥ï‡¥≥‡µÜ ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡µÅ‡¥ï"]
        }
    }
}

@router.post("/chat", response_model=ChatResponse)
async def chat_with_ai(
    request: ChatRequest,
    current_user: User = Depends(get_current_user),
    db = Depends(get_db)
):
    """Chat with BloodAid AI assistant with RAG enhancement"""
    try:
        # Try to get enhanced RAG response
        try:
            rag_assistant = get_bloodaid_rag()
            
            # Prepare user context
            user_context = {
                "user_id": str(current_user.id),
                "user_type": current_user.user_type,
                "query_context": request.context
            }
            
            # Get AI response with RAG enhancement
            ai_response = await rag_assistant.get_response(
                query=request.message,
                language=request.language,
                user_context=user_context
            )
            
            # Save chat history if database is available
            try:
                chat_entry = ChatHistory(
                    user_id=current_user.id,
                    message=request.message,
                    response=ai_response["response"],
                    context=request.context,
                    language=request.language
                )
                db.add(chat_entry)
                db.commit()
            except:
                pass  # Continue even if database save fails
            
            return ChatResponse(
                response=ai_response["response"],
                language=request.language,
                suggestions=ai_response.get("suggestions", [])
            )
            
        except Exception as rag_error:
            print(f"RAG error: {rag_error}")
            # Fallback to enhanced mock responses
            pass
        
        # Enhanced mock responses with better logic
        message_lower = request.message.lower()
        
        # Get base response for language
        context_responses = MOCK_RESPONSES.get(request.context, MOCK_RESPONSES["general"])
        lang_responses = context_responses.get(request.language, context_responses["en"])
        base_response = lang_responses["response"]
        
        # Enhanced response based on keywords
        response = base_response
        
        # Hemoglobin related queries
        if "hemoglobin" in message_lower or "hb" in message_lower:
            if request.language == "en":
                response = "Hemoglobin levels are crucial for blood donation eligibility. Normal levels:\n\n‚Ä¢ Men: 13.5-17.5 g/dL\n‚Ä¢ Women: 12.0-15.5 g/dL\n‚Ä¢ Minimum for donation: 12.5 g/dL\n\nTo increase hemoglobin:\n‚úì Iron-rich foods (spinach, red meat, lentils)\n‚úì Vitamin C (citrus fruits)\n‚úì Avoid tea/coffee with meals\n\nConsult a doctor if levels are consistently low."
            else:
                response = base_response
                
        elif "blood group" in message_lower or "blood type" in message_lower:
            if request.language == "en":
                response = "Blood Group Compatibility:\n\nüÖæÔ∏è O- (Universal Donor): Can donate to all\nüÖæÔ∏è O+: Can donate to O+, A+, B+, AB+\nüÖ∞Ô∏è A-: Can donate to A-, A+, AB-, AB+\nüÖ∞Ô∏è A+: Can donate to A+, AB+\nüÖ±Ô∏è B-: Can donate to B-, B+, AB-, AB+\nüÖ±Ô∏è B+: Can donate to B+, AB+\nüÜé AB-: Can donate to AB-, AB+\nüÜé AB+ (Universal Recipient): Can receive from all\n\nKnowing your blood type helps save lives!"
            else:
                response = base_response
                
        elif "thalassemia" in message_lower or "dialysis" in message_lower:
            if request.language == "en":
                response = "For chronic conditions requiring regular transfusions:\n\nü©∏ Thalassemia patients typically need blood every 2-3 weeks\nü©∏ Dialysis patients may need occasional transfusions\n\nBloodAid helps by:\n‚úì Building dedicated donor networks\n‚úì Scheduling recurring donations\n‚úì Emergency alerts when needed\n‚úì Coordinating with treatment centers\n\nWould you like help setting up a regular donor network?"
            else:
                response = base_response
                
        elif "donate" in message_lower and "eligibility" in message_lower:
            if request.language == "en":
                response = "Blood Donation Eligibility Checklist:\n\n‚úÖ Age: 18-65 years\n‚úÖ Weight: Minimum 50 kg\n‚úÖ Hemoglobin: ‚â•12.5 g/dL\n‚úÖ Blood Pressure: 110-160/70-100 mmHg\n‚úÖ No fever or illness\n‚úÖ No recent tattoos (4 months)\n‚úÖ No recent COVID (28 days)\n‚úÖ No recent travel to malaria areas\n\n‚è∞ Wait time between donations: 3-4 months\n\nShould I check your eligibility based on your health profile?"
            else:
                response = base_response
        
        # Generate suggestions based on context
        suggestions = lang_responses.get("suggestions", [])
        
        return ChatResponse(
            response=response,
            language=request.language,
            suggestions=suggestions
        )
        
    except Exception as e:
        # Final fallback response
        return ChatResponse(
            response="I'm sorry, I'm having trouble processing your request right now. Please try again or contact support.",
            language=request.language,
            suggestions=["Try again", "Contact support", "Emergency help"]
        )

@router.get("/health-check")
async def ai_health_check():
    """Check if AI service is healthy"""
    return {
        "status": "healthy",
        "service": "BloodAid AI Assistant",
        "languages": ["en", "hi", "kn", "te", "ml"],
        "features": ["multilingual_chat", "emergency_detection", "health_guidance", "rag_enhanced"]
    }

@router.get("/chat-history/{user_id}")
async def get_chat_history(
    user_id: str,
    current_user: User = Depends(get_current_user),
    db = Depends(get_db),
    limit: int = 20
):
    """Get user's chat history"""
    try:
        # Verify user can access this history
        if str(current_user.id) != user_id:
            raise HTTPException(status_code=403, detail="Cannot access other user's chat history")
        
        # Get recent chat history
        chats = db.query(ChatHistory)\
                 .filter(ChatHistory.user_id == current_user.id)\
                 .order_by(ChatHistory.created_at.desc())\
                 .limit(limit)\
                 .all()
        
        return {
            "chat_history": [
                {
                    "id": str(chat.id),
                    "message": chat.message,
                    "response": chat.response,
                    "context": chat.context,
                    "language": chat.language,
                    "created_at": chat.created_at.isoformat()
                }
                for chat in chats
            ]
        }
    except Exception as e:
        return {"chat_history": []}  # Return empty history if database fails